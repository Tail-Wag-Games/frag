#version 450

layout(std430, binding = 0) buffer cbt_Buffer {
    uint heap[];
} u_CbtBuffers[1];

layout (binding = 0) uniform sampler2D u_DmapSampler;

#include "frustum_culling.glsl"
#include "cbt.glsl"
#include "leb.glsl"
#include "terrain_common.glsl"

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
void main(void)
{
    // get threadID
    const int cbtID = 0;
    uint threadID = gl_GlobalInvocationID.x;

    if (threadID < cbt_NodeCount(cbtID)) {
        // and extract triangle vertices
        cbt_Node node = cbt_DecodeNode(cbtID, threadID);
        vec4 triangleVertices[3] = DecodeTriangleVertices(node);

        // compute target LoD
        vec2 targetLod = LevelOfDetail(triangleVertices);

        if (true) {
            leb_DiamondParent diamond = leb_DecodeDiamondParent_Square(node);
            bool shouldMergeBase = LevelOfDetail(DecodeTriangleVertices(diamond.base)).x < 1.0;
            bool shouldMergeTop = LevelOfDetail(DecodeTriangleVertices(diamond.top)).x < 1.0;

            if (shouldMergeBase && shouldMergeTop) {
                leb_MergeNode_Square(cbtID, node, diamond);
            }
        }
    }
}

