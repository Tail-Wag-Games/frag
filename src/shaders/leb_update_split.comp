#version 450

#define dispatchIndirect( \
	  _buffer             \
	, _offset             \
	, _numX               \
	, _numY               \
	, _numZ               \
	)                     \
	_buffer[8] = _numX; \
    _buffer[9] = _numY; \
    _buffer[10] = _numZ; \
    _buffer[11] = 0

#define drawIndexedIndirect( \
	  _buffer                \
	, _offset                \
	, _numIndices            \
	, _numInstances          \
	, _startIndex            \
	, _startVertex           \
	, _startInstance         \
	)                        \
    _buffer[0] = _numIndices; \
    _buffer[1] = _numInstances; \
    _buffer[2] = _startIndex; \
    _buffer[3] = _startVertex; \
    _buffer[4] = _startInstance; \
    _buffer[5] = 0; \
    _buffer[6] = 0; \
    _buffer[7] = 0

layout(std430, binding = 0) buffer cbt_Buffer {
    uint heap[];
} u_CbtBuffers[1];

layout (binding = 0) uniform sampler2D u_DmapSampler;

#include "frustum_culling.glsl"
#include "cbt.glsl"
#include "leb.glsl"
#include "terrain_common.glsl"

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main(void)
{
    // get threadID
    const int cbtID = 0;
    uint threadID = gl_GlobalInvocationID.x;

    if (threadID < cbt_NodeCount(cbtID)) {
        // and extract triangle vertices
        cbt_Node node = cbt_DecodeNode(cbtID, threadID);
        vec4 triangleVertices[3] = DecodeTriangleVertices(node);

        // compute target LoD
        vec2 targetLod = LevelOfDetail(triangleVertices);

        // splitting update
        if (targetLod.x > 1.0) {
            //leb_SplitNodeConforming_Quad(lebID, node);
            leb_SplitNode_Square(cbtID, node);
        }
    }
}

